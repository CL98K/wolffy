(defpackage wo-io/test
  (:use #:cl #:wo-io)
  (:export test))

(in-package #:wo-io/test)

(defun test ()
  (labels ((func1 ()
             (dotimes (i 10000000)
               (let ((ins (make-binary-stream :initial-data #(49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49))))
                 (binary-stream-write ins 49)
                 (binary-stream-write ins 50)
                 (binary-stream-write ins 51)
                 (binary-stream-write ins 52)
                 (binary-stream-write ins 53)
                 (binary-stream-write ins 54)
                 (binary-stream-write ins 55)
                 (binary-stream-write ins 56)
                 (binary-stream-write ins 57)
                 (binary-stream-write ins 58))))
           (func2 ()
             (dotimes (i 10000000)
               (let ((ins (make-binary-stream)))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58))
                 (binary-stream-writes ins #(49 50 51 52 53 10 54 55 56 10 57 58)))))
           (func3 ()
             (dotimes (i 10000000)
               (let ((ins (make-binary-stream :initial-data #(49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49))))
                 (dotimes (i 10)
                   (binary-stream-read ins)))))
           (func4 ()
             (dotimes (i 10000000)
               (let ((ins (make-binary-stream :initial-data #(49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49))))
                 (dotimes (i 10)
                   (binary-stream-reads ins 8)))))
           (func5 ()
             (dotimes (i 10000000)
               (let ((ins (make-binary-stream :initial-data #(1 12 3 14 15 10 1 2 3 4 5 10 6 7 8 9 10 10 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2))))
                 (dotimes (i 10)
                   (binary-stream-read-line ins)))))
           (func6 ()
             (dotimes (i 10000000)
               (let ((ins (make-binary-stream :initial-data #(1 12 3 14 15 10 1 2 3 4 5 10 6 7 8 9 10 10 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2)))
                     (buffer (make-array 8 :element-type '(unsigned-byte 8))))
                 (dotimes (i 10)
                   (binary-stream-read-into ins buffer))))))

    (format t "Test Write ~%")
    (time (func1))
    (format t "Test Writes ~%")
    (time (func2))
    (format t "Tets Read ~%")
    (time (func3))
    (format t "Tets Reads ~%")
    (time (func4))
    (format t "Test Line ~%")
    (time (func5))
    (format t "Test Into ~%")
    (time (func6))))

